#+TITLE: Chapter 5 - Hashed Data Structures

* Hashed Data Structures
- hashing is an alternate set of searching techniques for locating a nod in the key field mode
  + unlike the Sequential Search algorithm, hashing algorithms are fast
  + because of their speed, data structures that use hashing access algorithms are in wide use
- there is a downside to hashing structures:
  + for some applications, their overhead can be very high
* Hashing Access Algorithms
- hashing access algorithms are a collection of algorithms that share a common characteristic:
  + the given key is used to /compute/ an index or a location into a /primary/ storage area
- the primary storage area is a group of sequentially numbered storage cells
  + it is usually implemented as an array
  + sometimes the nodes themselves are stored in the primary storage area, sometimes its the paths to the nodes
- the ability to compute an index into the primary storage area from the given key is what gives hashing access algorithms their speed
  + sequential access algorithms perform time-consuming memory access to fetch keys from the data structure for comparison, which is slower
- the computation of the index into the primary storage area is performed using a mathematical function, /h/, that uses the given key as a variable
        /i/_/p/ = /h/(/k/)
  + /i/_/p/ is the index into the primary storage area
  + /h/ is the hashing (or mapping) function of a particular hashing access algorithm
  + /k/ is the contents of the key field of the node being accessed
- two of the most simplistic hashing functions used for numeric keys are:
  1. Division Hashing function: /i/_/p/ = /h/(/k/) = /k/ % /N/
  2. Hirect Hashig function: /i/_/p/ = /h/(/k/) = /k/
  +where /N/ is the number of storage locations allocated to the primary storage area and /k/ is the given key
- the Division function uses the division /remainder/ as the primary index while the Direct Hashing function uses the key as the primary index
- /n/_max / /N/ is referred to as the maximum /loading factor/
  + /n/_max is the maximum nodes that will be stored in the structure
- if the key is negative or non-numeric, then some form of /preprocessing/ is performed on the key to convert it to a numeric, non-negative value
  + this is called a pseudo key, /pk/, that is then used as the independent hashing function
** A Hashing Example
- the Division algorithm causes /collisions/ because it does not produce unique keys
  + the resolution is handled with /collision algorithms/
- collision algorithms reduch the speed of access becuase they add another processing step that usually involves multiple memory accesses
- /perfect hashing/ algorithms map every key into a unique primary storage area index
  + this unique mapping means that collisions cannot occur, and collission algorithms are not needed
- a perfect hashing function that minimizes the unused portions of the primary storage area is called a /minimum/ perfect hashing function
* Perfect Hashed Data Structures
- a *perfect hashing function* is a function that maps each key, in a /static/ set of keys, into a /unique/ index in the primary storage area
- a /static set of keys/ is the subset of all possible values of the key for which the function is valid
- condition under which the direct hashing function approaches a minimal perfect hashing function:
  + of the set of all possible key values, most (of all) of them will be stored in the structure
** Direct Hashed Structure
*** The Subtraction Preprocessing Algorithm
- in a numeric key application when the minimum key balue is nonzero, a subtraction preprocessing algorithm is used to compute a pseudo key
  + the pseudo key is then used in the Direct Hashing algorithm
- this prevents the Direct Hashing algorithm from generating negative indices and improves the density when the minimum key is positive
- the Suptraction Preprocessing algorithm is:
        /p//k/ = /k/ - /k/_min
  + /p//k/ is the calculated pseudo key
  + /k/ is the given that can assume negative values
  + /k/_min is the minimum value the key can assume
**** Primary Storage Area
- When an array of refernces are created in Java, each element is initialized to /null/
  + a /null/ element can be used to indicate that the whose key maps into the element is not in the structure
**** Operation Algorithms
- the four basic operation algorithms for the perfect hashed structure will begin the same way
  + the Direct Hashing structure will be used to determine the index into the primary storage area
    - if necessary, a preprocessing algorithm will be used
  + then, the element of the aray will be used as a refernce to the node
* Nonperfect Hashed Structures
- when the conditions of an application require high speed but are such that perfect hashing cannot be used, a non-perfect hashing structure is the next fastest alternative
  + perfect hashing structures cannot be used when the key is not static, the density would be too low, or an efficient perfect hashing function cannot be discovered
- these /hashed structures/ do /not/ provide a unique location in the primary storage area for every alowable value of the key
  + as a result, two or more keys can map into the same primary storage index
** Search Length
- *search length* is the number of memory accesses required to locate the node
- because the number of collisions varies from one operation to another, the average search length is used as a measure of the speed of a hashed structure
  + the hope is that the average search length would be below /n/ / 2 since that is the average search length of a slow sequential search
** Primary Storage Area Size
- a guideline for sizing the primary storage area of a hashed data structure is that it be a small percentage higher than the structure's maximum number of nodes
- the equation is thus:
        /N/ = /n/_max + /p/ * /n/_max
  + /N/ is the size of the primary storage area
  + /n/_max is the maximum number of nodes to be stored in the structure
  + /p/ is a percentage expressed in decimal form
    - usually, the value of /p/ is 33%
*** Optimum Loading Factor
- two factors are normally discussed regarding hashed structures
  1. the current loading factor, /l/
  2. the maximum loading factor, /l/_max
- the curren loading factor is computed using the maximum number of nodes that will be stored in the structure, /n/_max
- Loading Factor formulas:
        /l/ = /n/ / /N/ (current loading factor)
        /l/_max = /n/_max / /N/ (maximum loading factor)
  + /n/ is the number of nodes the structure /currently/ contains
  + /N/ is the number of elements in the primary storage array
  + /n/_max is the maximum number of nodes that will be stored in the structure
*** Prime Numbers
- if the primary storage area (/N/) is a prime number, the number of collisions for certain hashing functions and collision algorithms is minimized
- the performance of some hashing and collision algorithms improves even further if we choose only primes of the type "4/k/ + 3"
  + this is only a subset of all primes
** Preprocessing Algorithms
*** Fold-Shifting Preprocessing Algorithm
- divides the key field into groups of bits, wih the size (number of bits) of each group being the desired size of the pseudo key
  + then the groupings are traeted as numeric values and arithmetically added to produce the pseudo key
- typically, one grouping near the middle of the key, called the /pivot/, is selected as the first operand in the addition
  + arithmetic overflow from the hogher order bit is ignored, maintaining the size of the pseudo key
*** Pseudorandom Preprocessing
- a technique used to distribute keys somewhat /randomly/ about the primary storage area array
  + generally speaking, introducing randomness into the preprocessing algorithm tends to reduce the collision frequencies.
- Pseudorandom Preprocessing algorithm
        /p//k/ = /p/_1 * /k/ + /p/_2
  + /p//k/ is the pseudo key
  + /k/ is the key
  + /p/_1 and /p/_2 are prime numbers
    - these are usually small and, once chosen, retain their values over the life of the data structure
*** Digit Extraction Preprocessing
- a technique used to reduce the length of mulitposition (or multi-digit) keys and to introduce randomness into the pseudo keys it generates
- several key positions (/m/ of them) are retained to form the pseudo key
  + all other key positions are ignored
** Hashing Functions
- there are many hashing functions used in hashed structures to compute the index intothe primary storage area
  + this includes Direct Hashing and Division Hashing functions
- most hashed data structures perform some form of preprocessing
  + between the direct and division functions, teh Division algorithm is more commonly used in hashed structures
** Collision Algorithms
- can be divided into two categories:
  + those algorithms that compute an index into the primary storage area, called /open address/ collision algorithms
  + those that do not, called /non-open addressing/ collision algorithms
- when open addressing is used, each element of the primary storage area stores a refernce to a /single node/
  + the collision algorithm /always/ generates indexes into the primary storage area array
- when non-open addressing is used, each element of the primary storage area can store a reference to /multiple nodes/
  + this reference locates all the nodes that the preprocessing/hashing algorithms map into the element (/synonyms/)
*** Linear and Quadratic Probing Collision Algorithms
- these are two similar open addressing collision algorithms:
        /i/_/p/ = /i/_/p/ + 1 (linear probing collision algorithm)
        /i/_/p/ = /i/_/p/ + /p/^2 (quadratic probing collision algorithm)
  + /i/_/p/ is the index into the primary storage area array
  + /p/ is the pass number throuth the collision algorithm loop
*** The Linear Quotient Collision Algorithm
- like the Linear and Quadratic collision algorithms, it uses modulo /N/ arithmetic to keep the calculated indices within the bounds of the primary storage area array
  + similarly, it also calculates the next location by adding an offset to the previously computed location
- unlike those two, the offset is a function of the key (or pseudo key) which tends
- the offset is a /division/ quotient and the functional relationship is a /linear/ one
  + the quotient is the result of dividing the key (or pseudo key) by /N/
    - when the quotient is evenly divisible by /N/, it is replaced wih a somewhat arbitrarily chosen 4/k/ + 3 prime
- Linear Quotient Collision Algorithm
        if(q % N) != 0
            i_p = (i_p + offset) % N = (i_p + q) % N
        else
            i_p = (i_p + offset) % N = (i_p + p_4k+3) % N
  + q = pk / N
  + N is the number of elements in the primary storage area (a 4k+3 prime)
  + pk is the value of the integer pseudo key (of key when no preprocessing is performed)
  + p_4k+3 is any 4k+3 prime othe than N
**** The Delete Problem
- when a node is deleted, it's refence becomes null and there is no longer a record of collisions
- the fix is to have two references
  1. indicates that there has not been a refence at that location
  2. indicates that there was once a refernce at the location, but it has been deleted
- the second refence is usually to a dummy node
** Dynamic Hashed Structures
- the number of nodes specified by the client is typically used to establish the /initial/ size of the structure
  + the structure will grow beyond its initial size to accommodate additional nodes
- dynamic empansion of the data structure can be accomplished in a variety of ways
  + the size of the primary storage area array can be increased to accommodate additional node references
  + the additional storage can be provided outside of the primary storage area
  + a hybrid structure can be used that combines the two
- two popular approaches to providing additional storage outside of the primary storage area is to provide either a linked list of an array to store the additional node references
*** Java's Dynamic Hashtable Data Structure
- contained in the java.util package
- is an implementation of a /dynamic/ hashed data structure
- it is a nonhomogeneous, unencapsulated generic data structure accessed in the key field mode
  + the key can be any type of object
- structure is a dynamic hybrid: it expands its primary storage area and resolves collisions by providing additional storage for node refences outside of the primary key area
*** Linked Hashed Data Structures
- a common design of a dynamic hashed structure, it does not expand primary storage to accommodate additional nodes
  + instead, it provides additional storage outside of the primary storage area in the form of multiple linked lists
- each of the /N/ locations of the primary storage area array, commonly called a /bucket/, is a header of a singly linked list
  + all of the nodes that has to a given location of primary storage are stored in the linked list associated with that (home) location
- when a collision occurs during an insert operation, the length of the linked list is increased by one node
  + for speed considerations, the new node is normally inserted at the beginning of the linked list
